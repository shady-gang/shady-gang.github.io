<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Index on Vcc - the Vulkan Clang Compiler</title>
    <link>https://shady-gang.github.io/vcc/</link>
    <description>Recent content in Index on Vcc - the Vulkan Clang Compiler</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://shady-gang.github.io/vcc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C/C&#43;&#43; Language Extensions</title>
      <link>https://shady-gang.github.io/vcc/language-extensions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://shady-gang.github.io/vcc/language-extensions/</guid>
      <description>&lt;h2 id=&#34;using-shadyh&#34;&gt;&#xA;  Using &amp;lt;shady.h&amp;gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#using-shadyh&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;The &lt;code&gt;&amp;lt;shady.h&amp;gt;&lt;/code&gt; header includes definitions for intrinsics and macros that are unique to shaders and not exposed in the C/C++ standard librairies.&lt;/p&gt;&#xA;&lt;p&gt;It is &lt;em&gt;not&lt;/em&gt; necessary to include this file in every translation unit, only in the files where you want to use those features, and it is also required to annotate shader module entry points.&lt;/p&gt;&#xA;&lt;h3 id=&#34;vector-types&#34;&gt;&#xA;  Vector types&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#vector-types&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Vcc makes uses of the existing OpenCL C support in Clang and exposes small &lt;code&gt;vec&lt;/code&gt;-types as also found in GLSL. These are typedef&amp;rsquo;d as such:&lt;/p&gt;</description>
    </item>
    <item>
      <title>How this works</title>
      <link>https://shady-gang.github.io/vcc/how/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://shady-gang.github.io/vcc/how/</guid>
      <description>&lt;h2 id=&#34;what-is-shady&#34;&gt;&#xA;  What is Shady&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#what-is-shady&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Vcc is little more than a front-end for &lt;a href=&#34;https://github.com/shady-gang/shady&#34;&gt;Shady&lt;/a&gt;, a compiler and IR resulting from years of research and development at Saarland University. Shady was initially started to rationalize our GPU backends by supporting Vulkan in &lt;a href=&#34;https://anydsl.github.io/&#34;&gt;AnyDSL&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;As a language, it&amp;rsquo;s close to SPIR-V and LLVM but we have our own twist on a few things, in particular control-flow. Shady&amp;rsquo;s representation gives it distinct advantages when emulating constructs not found in SPIR-V. It is by necessity strongly aligned with SPIR-V and uses parts of the format verbatim in the IR, such as the builtins.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Publications</title>
      <link>https://shady-gang.github.io/vcc/publications/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://shady-gang.github.io/vcc/publications/</guid>
      <description>&lt;h2 id=&#34;publications&#34;&gt;&#xA;  Publications&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#publications&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;peer-reviewed-papers&#34;&gt;&#xA;  Peer-reviewed papers&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#peer-reviewed-papers&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;no-more-shading-languages-compiling-c-to-vulkan-shaders&#34;&gt;&#xA;  No More Shading Languages: Compiling C++ to Vulkan Shaders&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#no-more-shading-languages-compiling-c-to-vulkan-shaders&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;div style=&#34;background: #bfdcea; font-size: smaller;&#34;&gt;&#xA;Devillers Hugo,&#xA;Kurtenacker Matthias,&#xA;Membarth Richard,&#xA;Lemme Stefan,&#xA;Kenzel Michael,&#xA;Yazici Ã–mercan,&#xA;Slusallek Philipp&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Why do we have shading languages ? Why are they the way they are ? Can we do better ?&lt;/p&gt;&#xA;&lt;p&gt;Published as a conference paper at &lt;a href=&#34;https://www.highperformancegraphics.org/2025/index.html&#34;&gt;HPG2025&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Download the &lt;a href=&#34;https://xol.io/random/vcc-paper.pdf&#34;&gt;Paper PDF&lt;/a&gt; | Check it out on the &lt;a href=&#34;https://diglib.eg.org/items/21c8e94e-449a-4498-b2c9-80609bc1027a&#34;&gt;Eurographics Archive&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using Vcc</title>
      <link>https://shady-gang.github.io/vcc/use/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://shady-gang.github.io/vcc/use/</guid>
      <description>&lt;h2 id=&#34;getting-a-copy-of-vcc&#34;&gt;&#xA;  Getting a copy of Vcc&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#getting-a-copy-of-vcc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;There currently are no release builds available for Vcc, however it can be compiled as part of Shady which is freely available on &lt;a href=&#34;https://github.com/shady-gang/shady&#34;&gt;GitHub&lt;/a&gt;. The following dependencies are required:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A C11 compliant compiler&lt;/li&gt;&#xA;&lt;li&gt;CMake 3.13 or later&lt;/li&gt;&#xA;&lt;li&gt;json-c&lt;/li&gt;&#xA;&lt;li&gt;SPIRV-Headers&lt;/li&gt;&#xA;&lt;li&gt;Vulkan-Headers are optional but are used to build some components of shady such as tests&lt;/li&gt;&#xA;&lt;li&gt;A copy of LLVM that includes the CMakeConfig.cmake files, so that Vcc can link against it&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Multiple LLVM versions are supported because we use LLVM-C, which has a more stable interface. Versions 14 to 17 have been tested so far.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Additionally, a copy of &lt;code&gt;clang&lt;/code&gt; on your path is required at runtime for &lt;code&gt;vcc&lt;/code&gt; to operate. This copy &lt;em&gt;may&lt;/em&gt; be a different version than the LLVM you linked Vcc against, however might cause issues due to how the LLVM IR evolves over time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why ?</title>
      <link>https://shady-gang.github.io/vcc/why/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://shady-gang.github.io/vcc/why/</guid>
      <description>&lt;p&gt;This is a lot of effort. Why ?&lt;/p&gt;&#xA;&lt;h2 id=&#34;dissatisfaction-with-legacy-shading-languages&#34;&gt;&#xA;  Dissatisfaction with &amp;ldquo;Legacy&amp;rdquo; Shading Languages&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#dissatisfaction-with-legacy-shading-languages&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Back in the early 2000s a significant revolution happened in the world of realtime computer graphics: we moved from &amp;ldquo;dumb&amp;rdquo; graphics accelerator that had only a fixed set of functionality (texturing slots, blended vertex colors, hardware T&amp;amp;L &amp;hellip; ) to increasingly programmable hardware. This hardware transition was accompanied by an API transition, de-emphasizing the classic OpenGL state machine in favour of then-new high-level shading languages: GLSL and HLSL.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
